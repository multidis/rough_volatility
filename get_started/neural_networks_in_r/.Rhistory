library(jsonlite)
library(ggplot2)
library(gridExtra)
# Set paths to source code, weights and more:
# Remark: Works in Rstudio, otherwise you can set the folders manually.
project_folder <- dirname(dirname(dirname(rstudioapi::getSourceEditorContext()$path)))
code_folder <- gsub("/","//",paste(project_folder,"/code/r_code",sep=""))
contract_grid_folder <- gsub("/","//",paste(project_folder,"/code/neural_networks/data",sep=""))
weights_folder <- gsub("/","//",paste(project_folder,"/code/neural_networks/data/neural_network_weights/rheston",sep=""))
example_contracts_folder <- gsub("/","//",paste(project_folder,"/get_started",sep=""))
source(gsub("/","//",paste(code_folder,"/NeuralNetworkPricing.r",sep="")))
# Load model:
model <- LoadModel(contract_grid_folder,weights_folder,"rheston")
# Plot contract grid:
data_tmp <- data.frame(model$T,model$k)
ggplot(data_tmp, aes(x=model.T, y=model.k)) + geom_point(color="darkblue") +
ggtitle("Contract grid") + xlab("Expiries") + ylab("Log-moneyness") +
theme(plot.title = element_text(hjust = 0.5))
# Set parameters:
par <- c(0.1,0.3,-0.65,rep(0.10^2,length(model$Txi)))
# Remark: The order is (H,nu,rho,xi1,xi2,...,xi27) where the forward variance curve
# is assumed piecewise flat with gridpoints:
model$Txi
# Evaluate network in grid:
iv <- GetImpliedVolatility(model,par,model$k,model$T)
# Plot a few expiries:
uniqT <- unique(model$T)
idx_plot <- c(1,10,20,50)
data <- data.frame(model$k,model$T,iv)
p <- list()
for (i in 1:length(idx_plot)){
p[[i]] <- ggplot(data[uniqT[idx_plot[i]] == data$model.T,], aes(x=model.k, y=iv)) +
geom_line(color="darkblue") + geom_point(color="darkblue") +
ggtitle(paste("T = ",uniqT[idx_plot[i]],sep="")) +
xlab("Log-moneyness") + ylab("Implied volatility") +
theme(plot.title = element_text(hjust = 0.5))
}
grid.arrange(p[[1]],p[[2]],p[[3]],p[[4]],ncol=2)
# Load example contracts:
tmp <- read.delim(paste(example_contracts_folder,"//example_contracts.txt",sep=""), header = FALSE)
k_orig <- tmp$V1
T_orig <- tmp$V2
# Remove observed contracts outside the neural network domain:
idxKeep <- AreContractsInDomain(model,k_orig,T_orig)
k_obs <- k_orig[idxKeep]
T_obs <- T_orig[idxKeep]
